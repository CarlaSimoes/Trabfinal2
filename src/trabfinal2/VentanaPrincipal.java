/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabfinal2;


import java.awt.Color;

import java.awt.Graphics2D;

import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.KernelProducer;
import java.awt.BasicStroke;

import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.ByteLookupTable;

import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.ShortLookupTable;

import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import sm.cml.imagen.RestaOp;
import sm.image.BinaryOp;
import sm.image.EqualizationOp;

import sm.image.LookupTableProducer;
import sm.image.SobelOp;
import sm.image.TintOp;

import sm.cml.imagen.SumaOp;
import sm.cml.imagen.UmbralizacionOp;
import sm.cml.imagen.UmbralizacionOpColor;


/**
 *
 * @author carla
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    int formAnt=0;

    /**
     *
     */
    public int countVentanasInternas=0;
    boolean rel=false;
    double transp=1.0;
    boolean alis=false;
    boolean edit=false;
    Color color1=Color.black;
    Color color2=Color.black;
    BufferedImage imgSource;
    final static float dash1[] = { 10.0f };
    final static BasicStroke dashed = new BasicStroke(1.0f,
      BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f, dash1, 0.0f);
    
   
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        
        initComponents();
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jButton11 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jMenuItem2 = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jToolBar2 = new javax.swing.JToolBar();
        camara = new javax.swing.JButton();
        captureImg = new javax.swing.JButton();
        nuevojToolBar = new javax.swing.JButton();
        abrirJtoolBar = new javax.swing.JButton();
        guardarJToolBar = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        pencil = new javax.swing.JButton();
        line = new javax.swing.JButton();
        rectangle = new javax.swing.JButton();
        ellipse = new javax.swing.JButton();
        roundRect = new javax.swing.JButton();
        QuadCurve = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        jToolBar4 = new javax.swing.JToolBar();
        colorChooser = new javax.swing.JButton();
        iconGrosor = new javax.swing.JLabel();
        grosor = new javax.swing.JSpinner();
        stroke = new javax.swing.JComboBox();
        colorRelleno = new javax.swing.JButton();
        relleno1 = new javax.swing.JCheckBox();
        fillType = new javax.swing.JComboBox();
        opacidad = new javax.swing.JLabel();
        transparency = new javax.swing.JSlider();
        alisar = new javax.swing.JButton();
        jToolBar6 = new javax.swing.JToolBar();
        negativo = new javax.swing.JButton();
        duplicar = new javax.swing.JButton();
        tintado = new javax.swing.JButton();
        equalizador = new javax.swing.JButton();
        sobel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        panelPropiedades = new javax.swing.JPanel();
        panelColores = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        brilho = new javax.swing.JSlider();
        filtro = new javax.swing.JComboBox();
        estado = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        contraste = new javax.swing.JButton();
        iluminar = new javax.swing.JButton();
        escurecer = new javax.swing.JButton();
        sinusoidal = new javax.swing.JButton();
        rotacion = new javax.swing.JSlider();
        rotacion90 = new javax.swing.JButton();
        rotacion180 = new javax.swing.JButton();
        rotacion270 = new javax.swing.JButton();
        incrementa = new javax.swing.JButton();
        reduce = new javax.swing.JButton();
        umbralizacion = new javax.swing.JSlider();
        suma = new javax.swing.JButton();
        resta = new javax.swing.JButton();
        umbralizacionColor = new javax.swing.JSlider();
        mifuncion = new javax.swing.JButton();
        grayScale = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        escritorio = new jBackground();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        nuevo = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        abrirAudio = new javax.swing.JMenuItem();
        guardarAudio = new javax.swing.JMenuItem();
        abrirMedia = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        barraEstado = new javax.swing.JCheckBoxMenuItem();
        barraFormas = new javax.swing.JCheckBoxMenuItem();
        barraAtributos = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        acercaDe = new javax.swing.JCheckBoxMenuItem();

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jButton11.setText("jButton11");

        jLabel4.setText("jLabel4");

        jButton1.setText("jButton1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));

        jToolBar1.setBackground(new java.awt.Color(102, 102, 102));
        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.lightGray));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jToolBar1.setDebugGraphicsOptions(javax.swing.DebugGraphics.LOG_OPTION);
        jToolBar1.setOpaque(false);

        jToolBar2.setRollover(true);
        jToolBar1.add(jToolBar2);

        camara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        camara.setFocusable(false);
        camara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        camara.setSelected(true);
        camara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        camara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camaraActionPerformed(evt);
            }
        });
        jToolBar1.add(camara);

        captureImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        captureImg.setFocusable(false);
        captureImg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        captureImg.setSelected(true);
        captureImg.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        captureImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captureImgActionPerformed(evt);
            }
        });
        jToolBar1.add(captureImg);

        nuevojToolBar.setForeground(new java.awt.Color(204, 204, 204));
        nuevojToolBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevojToolBar.setFocusable(false);
        nuevojToolBar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevojToolBar.setSelected(true);
        nuevojToolBar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevojToolBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevojToolBarActionPerformed(evt);
            }
        });
        jToolBar1.add(nuevojToolBar);

        abrirJtoolBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrirJtoolBar.setFocusable(false);
        abrirJtoolBar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrirJtoolBar.setSelected(true);
        abrirJtoolBar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrirJtoolBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirJtoolBarActionPerformed(evt);
            }
        });
        jToolBar1.add(abrirJtoolBar);

        guardarJToolBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardarJToolBar.setFocusable(false);
        guardarJToolBar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardarJToolBar.setSelected(true);
        guardarJToolBar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardarJToolBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarJToolBarActionPerformed(evt);
            }
        });
        jToolBar1.add(guardarJToolBar);

        jToolBar3.setRollover(true);

        pencil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        pencil.setFocusable(false);
        pencil.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pencil.setSelected(true);
        pencil.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pencil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pencilActionPerformed(evt);
            }
        });
        jToolBar3.add(pencil);

        line.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        line.setFocusable(false);
        line.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        line.setSelected(true);
        line.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineActionPerformed(evt);
            }
        });
        jToolBar3.add(line);

        rectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        rectangle.setFocusable(false);
        rectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectangle.setSelected(true);
        rectangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleActionPerformed(evt);
            }
        });
        jToolBar3.add(rectangle);

        ellipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        ellipse.setFocusable(false);
        ellipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ellipse.setSelected(true);
        ellipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ellipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseActionPerformed(evt);
            }
        });
        jToolBar3.add(ellipse);

        roundRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/roundRectangle.png"))); // NOI18N
        roundRect.setFocusable(false);
        roundRect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        roundRect.setSelected(true);
        roundRect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        roundRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundRectActionPerformed(evt);
            }
        });
        jToolBar3.add(roundRect);

        QuadCurve.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/curve.png"))); // NOI18N
        QuadCurve.setFocusable(false);
        QuadCurve.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        QuadCurve.setSelected(true);
        QuadCurve.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        QuadCurve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuadCurveActionPerformed(evt);
            }
        });
        jToolBar3.add(QuadCurve);

        editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        editar.setFocusable(false);
        editar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editar.setSelected(true);
        editar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });
        jToolBar3.add(editar);

        jToolBar1.add(jToolBar3);

        jToolBar4.setRollover(true);

        colorChooser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tracecolor.png"))); // NOI18N
        colorChooser.setFocusable(false);
        colorChooser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        colorChooser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        colorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserActionPerformed(evt);
            }
        });
        jToolBar4.add(colorChooser);

        iconGrosor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/grosor.png"))); // NOI18N
        jToolBar4.add(iconGrosor);

        grosor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        grosor.setMaximumSize(new java.awt.Dimension(55, 25));
        grosor.setMinimumSize(new java.awt.Dimension(55, 20));
        grosor.setPreferredSize(new java.awt.Dimension(55, 25));
        grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorStateChanged(evt);
            }
        });
        jToolBar4.add(grosor);

        stroke.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stroke continuous", "Stroke separate" }));
        stroke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strokeActionPerformed(evt);
            }
        });
        jToolBar4.add(stroke);

        colorRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/fillColor.png"))); // NOI18N
        colorRelleno.setFocusable(false);
        colorRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        colorRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        colorRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorRellenoActionPerformed(evt);
            }
        });
        jToolBar4.add(colorRelleno);

        relleno1.setText("Fill Shape");
        relleno1.setFocusable(false);
        relleno1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        relleno1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        relleno1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relleno1ActionPerformed(evt);
            }
        });
        jToolBar4.add(relleno1);

        fillType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Solid Color", "Horizontal Gradient", "Vertical Gradient" }));
        fillType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillTypeActionPerformed(evt);
            }
        });
        jToolBar4.add(fillType);

        opacidad.setText("opacidad");
        jToolBar4.add(opacidad);

        transparency.setMajorTickSpacing(1);
        transparency.setMinorTickSpacing(1);
        transparency.setPaintTicks(true);
        transparency.setToolTipText("");
        transparency.setValue(100);
        transparency.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transparencyStateChanged(evt);
            }
        });
        transparency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                transparencyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                transparencyFocusLost(evt);
            }
        });
        jToolBar4.add(transparency);

        alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        alisar.setFocusable(false);
        alisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisar.setSelected(true);
        alisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisarActionPerformed(evt);
            }
        });
        jToolBar4.add(alisar);

        jToolBar6.setRollover(true);

        negativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/negative.png"))); // NOI18N
        negativo.setFocusable(false);
        negativo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        negativo.setSelected(true);
        negativo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        negativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativoActionPerformed(evt);
            }
        });
        jToolBar6.add(negativo);

        duplicar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/duplicate.png"))); // NOI18N
        duplicar.setFocusable(false);
        duplicar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        duplicar.setSelected(true);
        duplicar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        duplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicarActionPerformed(evt);
            }
        });
        jToolBar6.add(duplicar);

        tintado.setText("tintado");
        tintado.setFocusable(false);
        tintado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tintado.setSelected(true);
        tintado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tintadoActionPerformed(evt);
            }
        });
        jToolBar6.add(tintado);

        equalizador.setText("equalizador");
        equalizador.setFocusable(false);
        equalizador.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        equalizador.setSelected(true);
        equalizador.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        equalizador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizadorActionPerformed(evt);
            }
        });
        jToolBar6.add(equalizador);

        sobel.setText("sobel");
        sobel.setFocusable(false);
        sobel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sobel.setSelected(true);
        sobel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobelActionPerformed(evt);
            }
        });
        jToolBar6.add(sobel);

        jToolBar4.add(jToolBar6);

        jToolBar1.add(jToolBar4);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        panelPropiedades.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.gray, null, null));
        panelPropiedades.setMinimumSize(new java.awt.Dimension(500, 76));
        panelPropiedades.setLayout(new java.awt.BorderLayout());

        panelColores.setLayout(new java.awt.GridLayout(2, 4));

        jLabel1.setText("Brilho");
        panelColores.add(jLabel1);

        jLabel2.setText("Filtro");
        panelColores.add(jLabel2);

        brilho.setMaximum(255);
        brilho.setMinimum(-255);
        brilho.setValue(0);
        brilho.setPreferredSize(new java.awt.Dimension(150, 26));
        brilho.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilhoStateChanged(evt);
            }
        });
        brilho.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilhoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilhoFocusLost(evt);
            }
        });
        panelColores.add(brilho);
        brilho.getAccessibleContext().setAccessibleDescription("");

        filtro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media 3x3", "Media 5x5", "Media 7x7", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroActionPerformed(evt);
            }
        });
        panelColores.add(filtro);

        panelPropiedades.add(panelColores, java.awt.BorderLayout.WEST);

        estado.setText("Barra de estado");
        estado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelPropiedades.add(estado, java.awt.BorderLayout.PAGE_END);

        jPanel4.setMinimumSize(new java.awt.Dimension(300, 50));
        jPanel4.setLayout(new java.awt.GridLayout(2, 13));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Contraste");
        jPanel4.add(jLabel3);
        jPanel4.add(jLabel5);
        jPanel4.add(jLabel6);
        jPanel4.add(jLabel8);

        jLabel7.setText("Rotación");
        jPanel4.add(jLabel7);
        jPanel4.add(jLabel9);
        jPanel4.add(jLabel11);
        jPanel4.add(jLabel10);

        jLabel12.setText("Escala");
        jPanel4.add(jLabel12);
        jPanel4.add(jLabel13);

        jLabel14.setText("Umbralización");
        jPanel4.add(jLabel14);
        jPanel4.add(jLabel16);

        jLabel15.setText("Binarias");
        jPanel4.add(jLabel15);

        jLabel19.setText("UmbrColor");
        jPanel4.add(jLabel19);

        jLabel21.setText("MyFunct");
        jPanel4.add(jLabel21);

        jLabel22.setText("GrayScale");
        jPanel4.add(jLabel22);
        jPanel4.add(jLabel20);

        contraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica10/contraste.png"))); // NOI18N
        contraste.setMaximumSize(new java.awt.Dimension(25, 25));
        contraste.setMinimumSize(new java.awt.Dimension(25, 25));
        contraste.setPreferredSize(new java.awt.Dimension(25, 25));
        contraste.setSelected(true);
        contraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteActionPerformed(evt);
            }
        });
        jPanel4.add(contraste);

        iluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica10/iluminar.png"))); // NOI18N
        iluminar.setPreferredSize(new java.awt.Dimension(25, 25));
        iluminar.setSelected(true);
        iluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminarActionPerformed(evt);
            }
        });
        jPanel4.add(iluminar);

        escurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica10/oscurecer.png"))); // NOI18N
        escurecer.setPreferredSize(new java.awt.Dimension(25, 25));
        escurecer.setSelected(true);
        escurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escurecerActionPerformed(evt);
            }
        });
        jPanel4.add(escurecer);

        sinusoidal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica10/sinusoidal.png"))); // NOI18N
        sinusoidal.setSelected(true);
        sinusoidal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinusoidalActionPerformed(evt);
            }
        });
        jPanel4.add(sinusoidal);

        rotacion.setMaximum(360);
        rotacion.setMinorTickSpacing(90);
        rotacion.setPaintTicks(true);
        rotacion.setValue(0);
        rotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotacionStateChanged(evt);
            }
        });
        rotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotacionFocusLost(evt);
            }
        });
        jPanel4.add(rotacion);

        rotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica10/rotacion90.png"))); // NOI18N
        rotacion90.setSelected(true);
        rotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90ActionPerformed(evt);
            }
        });
        jPanel4.add(rotacion90);

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica10/rotacion180.png"))); // NOI18N
        rotacion180.setSelected(true);
        rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180ActionPerformed(evt);
            }
        });
        jPanel4.add(rotacion180);

        rotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica10/rotacion270.png"))); // NOI18N
        rotacion270.setSelected(true);
        rotacion270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion270ActionPerformed(evt);
            }
        });
        jPanel4.add(rotacion270);

        incrementa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica10/aumentar.png"))); // NOI18N
        incrementa.setSelected(true);
        incrementa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incrementaActionPerformed(evt);
            }
        });
        jPanel4.add(incrementa);

        reduce.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica10/disminuir.png"))); // NOI18N
        reduce.setSelected(true);
        reduce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reduceActionPerformed(evt);
            }
        });
        jPanel4.add(reduce);

        umbralizacion.setMaximum(255);
        umbralizacion.setValue(127);
        umbralizacion.setMinimumSize(new java.awt.Dimension(50, 26));
        umbralizacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                umbralizacionStateChanged(evt);
            }
        });
        umbralizacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                umbralizacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                umbralizacionFocusLost(evt);
            }
        });
        jPanel4.add(umbralizacion);

        suma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/suma.png"))); // NOI18N
        suma.setSelected(true);
        suma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumaActionPerformed(evt);
            }
        });
        jPanel4.add(suma);

        resta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/resta.png"))); // NOI18N
        resta.setSelected(true);
        resta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restaActionPerformed(evt);
            }
        });
        jPanel4.add(resta);

        umbralizacionColor.setMaximum(255);
        umbralizacionColor.setValue(127);
        umbralizacionColor.setMinimumSize(new java.awt.Dimension(50, 26));
        umbralizacionColor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                umbralizacionColorStateChanged(evt);
            }
        });
        umbralizacionColor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                umbralizacionColorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                umbralizacionColorFocusLost(evt);
            }
        });
        jPanel4.add(umbralizacionColor);

        mifuncion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/suma.png"))); // NOI18N
        mifuncion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mifuncionActionPerformed(evt);
            }
        });
        jPanel4.add(mifuncion);

        grayScale.setText("Gray");
        grayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayScaleActionPerformed(evt);
            }
        });
        jPanel4.add(grayScale);

        panelPropiedades.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel5.setLayout(new java.awt.GridLayout(2, 1));
        panelPropiedades.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(panelPropiedades, java.awt.BorderLayout.SOUTH);

        jPanel2.setBackground(new java.awt.Color(0, 0, 102));
        jPanel2.setLayout(new java.awt.BorderLayout());

        escritorio.setBackground(new java.awt.Color(0, 0, 0));
        escritorio.setPreferredSize(new java.awt.Dimension(600, 500));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1326, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 195, Short.MAX_VALUE)
        );

        jPanel2.add(escritorio, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Archivo");

        nuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevo.setText("Nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        jMenu1.add(nuevo);

        abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        jMenu1.add(abrir);

        guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        jMenu1.add(guardar);

        abrirAudio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        abrirAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/openAudio24x24.png"))); // NOI18N
        abrirAudio.setText("Abrir");
        abrirAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirAudioActionPerformed(evt);
            }
        });
        jMenu1.add(abrirAudio);

        guardarAudio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        guardarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        guardarAudio.setText("Guardar");
        guardarAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarAudioActionPerformed(evt);
            }
        });
        jMenu1.add(guardarAudio);

        abrirMedia.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        abrirMedia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/AbrirMedio.png"))); // NOI18N
        abrirMedia.setText("Abrir Media");
        abrirMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMediaActionPerformed(evt);
            }
        });
        jMenu1.add(abrirMedia);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ver");

        barraEstado.setSelected(true);
        barraEstado.setText("Ver barra de estado");
        barraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barraEstadoActionPerformed(evt);
            }
        });
        jMenu2.add(barraEstado);

        barraFormas.setSelected(true);
        barraFormas.setText("Barra de formas");
        barraFormas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barraFormasActionPerformed(evt);
            }
        });
        jMenu2.add(barraFormas);

        barraAtributos.setSelected(true);
        barraAtributos.setText("Barra de Atributos");
        jMenu2.add(barraAtributos);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Ayuda");

        acercaDe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        acercaDe.setSelected(true);
        acercaDe.setText("Acerca de");
        acercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acercaDeActionPerformed(evt);
            }
        });
        jMenu4.add(acercaDe);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lienzo1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienzo1MouseClicked
       
    }//GEN-LAST:event_lienzo1MouseClicked

    private void lienzo1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienzo1MouseDragged

    }//GEN-LAST:event_lienzo1MouseDragged

    private void lienzo1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienzo1MouseReleased

    }//GEN-LAST:event_lienzo1MouseReleased

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        
        FileNameExtensionFilter File_png = new FileNameExtensionFilter("PNG (*.png)", "png");
        FileNameExtensionFilter File_jpg = new FileNameExtensionFilter("JPEG (*.jpg)", "jpg");
        FileNameExtensionFilter File_gif = new FileNameExtensionFilter("GIF (*.gif)", "gif");
        dlg.setFileFilter(File_png);
        dlg.setFileFilter(File_jpg);
        dlg.setFileFilter(File_gif);
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
       
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna(this);
                vi.lienzo2D1.setImage(img);
                vi.lienzo2D1.setDimensions(img.getWidth(), img.getHeight());
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_abrirActionPerformed

    @SuppressWarnings("UseSpecificCatch")
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            JFileChooser dlg = new JFileChooser();
            FileNameExtensionFilter File_png = new FileNameExtensionFilter("PNG (.png)", "png");
            FileNameExtensionFilter File_jpg = new FileNameExtensionFilter("JPEG (.jpg)", "jpg");
            FileNameExtensionFilter File_gif = new FileNameExtensionFilter("GIF (.gif)", "gif");
            dlg.setFileFilter(File_png);
            dlg.setFileFilter(File_jpg);
            dlg.setFileFilter(File_gif);
            int resp = dlg.showSaveDialog(this);

            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    
                    BufferedImage img = vi.lienzo2D1.getImage(vi.lienzo2D1.isDrawed());
                    if (img != null) {

                        File f = dlg.getSelectedFile();

                        String fullPath = f.toString();
                        String ext;

                        if (fullPath.lastIndexOf('.') == -1) {
                            ext = "";
                        } else {
                            ext = fullPath.substring(fullPath.lastIndexOf('.') + 1);
                        }
                        vi.setTitle(f.getName());
                        if (ImageIO.write(img, "jpg", f)) {
                            JOptionPane.showMessageDialog(null, "Guardado");
                        } else {
                            JOptionPane.showMessageDialog(null, "Error");
                        }
                        
                    }
                } catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_guardarActionPerformed


    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        countVentanasInternas++;
        VentanaInterna vi;
        if(countVentanasInternas<=1) vi=new VentanaInterna(this);
        else{
            
             vi=new VentanaInterna(this);
              vi.lienzo2D1.setAlisar(alis);
              vi.lienzo2D1.setRelleno(rel);
              vi.lienzo2D1.setColor(color1);
              vi.lienzo2D1.setColorRelleno(color2);
              vi.lienzo2D1.setStroke(grosor.getValue().hashCode());
              vi.lienzo2D1.setTransparencia(transparency.getValue());
              vi.lienzo2D1.setForm(formAnt);
        }
        escritorio.add(vi);
        vi.setVisible(true);
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);
        //AQUI: Codigo para "pintar" la imagen en blanco
        Graphics2D ig2 = img.createGraphics();

        ig2.setBackground(Color.WHITE);
        ig2.setStroke(new BasicStroke(1.0f,
                BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f, dash1, 0.0f));
        ig2.draw(new RoundRectangle2D.Double(0, 0, 300, 300, 10, 10));
        ig2.clearRect(0, 0, 300, 300);
        vi.lienzo2D1.setDimensions(300, 300);
        vi.lienzo2D1.setImage(img);
//       
    }//GEN-LAST:event_nuevoActionPerformed

    private void barraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barraFormasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barraFormasActionPerformed

    private void barraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barraEstadoActionPerformed
        if (barraEstado.isSelected()) estado.setVisible(true);
        else  estado.setVisible(false);
    }//GEN-LAST:event_barraEstadoActionPerformed

    private void restaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(true);
            if (viNext != null) {
                BufferedImage imgRight = vi.lienzo2D1.getImage();
                BufferedImage imgLeft = viNext.lienzo2D1.getImage();
                if (imgRight != null && imgLeft != null) {
                    try {

                        BinaryOp op = new RestaOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        VentanaInterna vi2 = new VentanaInterna(this);
                        vi2.lienzo2D1.setImage(imgdest);
                        this.escritorio.add(vi2);
                        vi2.setVisible(true);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_restaActionPerformed

    private void sumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(true);
            if (viNext != null) {
                BufferedImage imgRight = vi.lienzo2D1.getImage();
                BufferedImage imgLeft = viNext.lienzo2D1.getImage();
                if (imgRight != null && imgLeft != null) {
                    try {
                        BinaryOp op = new SumaOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        VentanaInterna vi2 = new VentanaInterna(this);
                        
                        vi2.lienzo2D1.setImage(imgdest);
                        this.escritorio.add(vi2);
                        vi2.setVisible(true);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_sumaActionPerformed

    private void umbralizacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralizacionFocusLost
        imgSource = null;
        umbralizacion.setValue(127);
    }//GEN-LAST:event_umbralizacionFocusLost

    private void umbralizacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralizacionFocusGained
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) imgSource = vi.lienzo2D1.getImage();
    }//GEN-LAST:event_umbralizacionFocusGained

    private void umbralizacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbralizacionStateChanged
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {

            try{
                if (imgSource != null) {

                    try {
                        UmbralizacionOp umbrOp=new UmbralizacionOp (this.umbralizacion.getValue());
                        BufferedImage imgdest = umbrOp.filter(imgSource,null);
                        vi.lienzo2D1.setImage(imgdest);
                        vi.lienzo2D1.repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
            catch(NullPointerException e){
                System.err.println(e.getLocalizedMessage());

            }
        }

    }//GEN-LAST:event_umbralizacionStateChanged

    private void reduceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reduceActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {

                try {
                    AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }

            }
        }
    }//GEN-LAST:event_reduceActionPerformed

    private void incrementaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incrementaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {

                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }

            }
        }
    }//GEN-LAST:event_incrementaActionPerformed

    private void rotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {

                try {

                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(270.0),
                        imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);

                    vi.repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_rotacion270ActionPerformed

    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {

                try {

                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180.0),
                        imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);

                    vi.repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_rotacion180ActionPerformed

    private void rotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90ActionPerformed

        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {

                try {

                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(90.0),
                        imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);

                    vi.repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_rotacion90ActionPerformed

    private void rotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionFocusLost
        imgSource = null;
    }//GEN-LAST:event_rotacionFocusLost

    private void rotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionFocusGained
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) imgSource = vi.lienzo2D1.getImage();
    }//GEN-LAST:event_rotacionFocusGained

    private void rotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotacionStateChanged
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgOut;

            if (imgSource != null) {

                try {
                    double scale = rotacion.getValue();
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(scale),
                        imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);

                    vi.lienzo2D1.setImage(imgdest);
                    vi.lienzo2D1.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rotacionStateChanged

    private void sinusoidalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinusoidalActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    //cambiar la funcion

                    LookupTable lt = seno(180.0/255.0);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();

                }
                catch(Exception e) {
                    System.err.println(e.getLocalizedMessage());

                }
            }
        }
    }//GEN-LAST:event_sinusoidalActionPerformed

    private void escurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escurecerActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    //cambiar la funcion
                    int type = LookupTableProducer.TYPE_POWER;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_escurecerActionPerformed

    private void iluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    //cambiar la funcion
                    int type = LookupTableProducer.TYPE_ROOT;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_iluminarActionPerformed

    private void contrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteActionPerformed

        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    int type = LookupTableProducer.TYPE_SFUNCION;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrasteActionPerformed

    private void filtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null){
            imgSource = vi.lienzo2D1.getImage();
            System.out.println("valor filtro: " + this.filtro.getSelectedIndex());
            if (imgSource != null) {
                try {

                    if (this.filtro.getSelectedIndex() == 0) {
                        float filtroMedia[] = new float[9];
                        for(int i=0; i<9; i++){
                            filtroMedia[i]=0.11f;
                        }
                        Kernel k = new Kernel(3, 3, filtroMedia);
                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgdest = cop.filter(imgSource, null);
                        vi.lienzo2D1.setImage(imgdest);
                        vi.lienzo2D1.repaint();
                    } else if (this.filtro.getSelectedIndex() == 1) {
                        float filtroMedia[] = new float[25];
                        for(int i=0; i<25; i++){
                            filtroMedia[i]=0.04f;
                        }
                        Kernel k = new Kernel(5, 5, filtroMedia);
                        ConvolveOp cop = new ConvolveOp(k);

                        BufferedImage imgdest = cop.filter(imgSource, null);
                        vi.lienzo2D1.setImage(imgdest);
                        vi.lienzo2D1.repaint();

                    } else if (this.filtro.getSelectedIndex() == 2) {
                        float filtroMedia[] = new float[49];
                        for(int i=0; i<49; i++){
                            filtroMedia[i]=0.02f;
                        }
                        Kernel k  = new Kernel(7, 7, filtroMedia);
                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgdest = cop.filter(imgSource, null);
                        vi.lienzo2D1.setImage(imgdest);
                        vi.lienzo2D1.repaint();
                    } else if (this.filtro.getSelectedIndex() == 3) {
                        Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                        ConvolveOp cop= new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                        BufferedImage imgdest = cop.filter(imgSource, null);
                        vi.lienzo2D1.setImage(imgdest);
                        vi.lienzo2D1.repaint();
                    } else if (this.filtro.getSelectedIndex() == 4) {
                        Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                        ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);

                        BufferedImage imgdest = cop.filter(imgSource, null);
                        vi.lienzo2D1.setImage(imgdest);
                        vi.lienzo2D1.repaint();
                    }
                    else if (this.filtro.getSelectedIndex() == 5){
                        Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                        ConvolveOp cop= new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                        BufferedImage imgdest = cop.filter(imgSource, null);
                        vi.lienzo2D1.setImage(imgdest);
                        vi.lienzo2D1.repaint();

                    }
                    else{
                        Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                        ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                        BufferedImage imgdest = cop.filter(imgSource, null);
                        vi.lienzo2D1.setImage(imgdest);
                        vi.lienzo2D1.repaint();
                    }

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_filtroActionPerformed

    private void brilhoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilhoFocusLost

        // VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        imgSource = null;
    }//GEN-LAST:event_brilhoFocusLost

    private void brilhoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilhoFocusGained
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) imgSource = vi.lienzo2D1.getImage();
    }//GEN-LAST:event_brilhoFocusGained

    private void brilhoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilhoStateChanged
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgOut;
            System.out.println("valor brilho: "+this.brilho.getValue());
            RescaleOp rop=new RescaleOp(1.0f, brilho.getValue(), null);
            if (imgSource.getColorModel().hasAlpha()) {
                float scales[] = {1.0f, 1.0f, 1.0f, 1.0f};
                float vBrilho = brilho.getValue();
                float offsets[] = {vBrilho, vBrilho, vBrilho, 0.0f};
                rop = new RescaleOp(scales, offsets, null);
            }

            if (imgSource != null) {

                try {
                    BufferedImage imgdest = rop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);
                    vi.lienzo2D1.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_brilhoStateChanged

    private void alisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisarActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (!alis) {
            vi.lienzo2D1.setAlisar(true);
            alis=true;
        } else {
            vi.lienzo2D1.setAlisar(false);
            alis=false;
        }
    }//GEN-LAST:event_alisarActionPerformed

    private void grosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorStateChanged
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.lienzo2D1.setGrosor(grosor.getValue().hashCode());
        
    }//GEN-LAST:event_grosorStateChanged

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (!edit) {
            vi.lienzo2D1.setEditar(true);
            edit=true;
        } else {
            vi.lienzo2D1.setEditar(false);
            edit=false;
        }
        estado.setText("Editar, selecionar forma");
    }//GEN-LAST:event_editarActionPerformed

    private void ellipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(formAnt!=3){
            vi.lienzo2D1.setForm(3);
            formAnt=3;
        }
        estado.setText("Ellipse");
    }//GEN-LAST:event_ellipseActionPerformed

    private void rectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(formAnt!=2){
            vi.lienzo2D1.setForm(2);
            formAnt=2;
        }
        estado.setText("Rectangulo");
    }//GEN-LAST:event_rectangleActionPerformed

    private void lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(formAnt!=1){
            vi.lienzo2D1.setForm(1);
            formAnt=1;
        }
        estado.setText("Linea");
    }//GEN-LAST:event_lineActionPerformed

    private void pencilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pencilActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.lienzo2D1.setForm(0);
        formAnt=0;
        estado.setText("Punto");
    }//GEN-LAST:event_pencilActionPerformed

    private void guardarJToolBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarJToolBarActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        
        if (vi != null) {
            JFileChooser dlg = new JFileChooser();
            FileNameExtensionFilter File_png = new FileNameExtensionFilter("PNG (.png)", "png");
            FileNameExtensionFilter File_jpg = new FileNameExtensionFilter("JPEG (.jpg)", "jpg");
            FileNameExtensionFilter File_gif = new FileNameExtensionFilter("GIF (.gif)", "gif");
            dlg.setFileFilter(File_png);
            dlg.setFileFilter(File_jpg);
            dlg.setFileFilter(File_gif);
            int resp = dlg.showSaveDialog(this);

            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    

                    BufferedImage img = vi.lienzo2D1.getImage(true);
                    if (img != null) {

                        File f = dlg.getSelectedFile();

                        String fullPath = f.toString();
                        String ext;

                        if (fullPath.lastIndexOf('.') == -1) {
                            ext = "";
                        } else {
                            ext = fullPath.substring(fullPath.lastIndexOf('.') + 1);
                        }
                        
                        
                        vi.setTitle(f.getName());
                        if (ImageIO.write(img.getSubimage(0, 0, img.getWidth(), img.getHeight()), "jpg", f)) {
                            JOptionPane.showMessageDialog(null, "Guardado");
                        } else {
                            JOptionPane.showMessageDialog(null, "Error");
                        }

                    }
                } catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_guardarJToolBarActionPerformed

    private void abrirJtoolBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirJtoolBarActionPerformed
        JFileChooser dlg = new JFileChooser();
        FileNameExtensionFilter File_png = new FileNameExtensionFilter("PNG (*.png)", "png");
            FileNameExtensionFilter File_jpg = new FileNameExtensionFilter("JPEG (*.jpg)", "jpg");
            FileNameExtensionFilter File_gif = new FileNameExtensionFilter("GIF (*.gif)", "gif");
            dlg.setFileFilter(File_png);
            dlg.setFileFilter(File_jpg);
            dlg.setFileFilter(File_gif);
            int resp = dlg.showOpenDialog(this);
        

        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
               

                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna(this);
                vi.lienzo2D1.setImage(img);
                vi.lienzo2D1.setDimensions(img.getWidth(), img.getHeight());
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_abrirJtoolBarActionPerformed

    private void nuevojToolBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevojToolBarActionPerformed
        countVentanasInternas++;
        VentanaInterna vi;
        if(countVentanasInternas<=1) vi=new VentanaInterna(this);
        else{
             vi=new VentanaInterna(this);
             vi.lienzo2D1.setAlisar(alis);
              vi.lienzo2D1.setRelleno(rel);
              vi.lienzo2D1.setColor(color1);
              vi.lienzo2D1.setColorRelleno(color2);
              vi.lienzo2D1.setStroke(grosor.getValue().hashCode());
              vi.lienzo2D1.setTransparencia(transparency.getValue());
              vi.lienzo2D1.setForm(formAnt);
        }
        
        escritorio.add(vi);
        vi.setVisible(true);
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        //AQUI: Codigo para "pintar" la imagen en blanco
        Graphics2D ig2 = img.createGraphics();

        ig2.setBackground(Color.WHITE);
        ig2.clearRect(0, 0, 300, 300);
        vi.lienzo2D1.setDimensions(300,300);
        vi.lienzo2D1.setImage(img);
        
    }//GEN-LAST:event_nuevojToolBarActionPerformed

    private void abrirAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirAudioActionPerformed
        JFileChooser dlg = new JFileChooser();
        FileNameExtensionFilter File_wav = new FileNameExtensionFilter("AUDIO [wav]", "wav");
        FileNameExtensionFilter File_au = new FileNameExtensionFilter("AUDIO [au]", "au");
        FileNameExtensionFilter File_aif = new FileNameExtensionFilter("AUDIO [aif]", "aif");
            
        dlg.setFileFilter(File_wav);
        dlg.setFileFilter(File_au);
        dlg.setFileFilter(File_aif);
        int resp = dlg.showOpenDialog(this);

        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();

                
                VentanaInternaReproductor viR = new VentanaInternaReproductor(f);
                
                this.escritorio.add(viR);
                viR.setTitle(f.getName());
                viR.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_abrirAudioActionPerformed

    private void guardarAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarAudioActionPerformed
  
        
            JFileChooser dlg = new JFileChooser();
            FileNameExtensionFilter File_wav = new FileNameExtensionFilter("AUDIO [wav]", "wav");
            FileNameExtensionFilter File_au = new FileNameExtensionFilter("AUDIO [au]", "au");
            FileNameExtensionFilter File_aif = new FileNameExtensionFilter("AUDIO [aif]", "aif");
            
            dlg.setFileFilter(File_wav);
            dlg.setFileFilter(File_au);
            dlg.setFileFilter(File_aif);
             
            int resp = dlg.showSaveDialog(this);

            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    File f = dlg.getSelectedFile();
                    
                    String fullPath = f.toString();
                        String ext;

                        if (fullPath.lastIndexOf('.') == -1) {
                            ext = "";
                        } else {
                            ext = fullPath.substring(fullPath.lastIndexOf('.') + 1);
                        }
                        if(ext.equals("wav") || ext.equals("aif") || ext.equals("au")  ){
                            VentanaInternaGrabador rec= new VentanaInternaGrabador(f);
                            this.escritorio.add(rec);
                            rec.setTitle(f.getName());
                            rec.setVisible(true);
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Error fichero de formato desconocido ");
                        }
                        
                } catch (Exception ex) {
                    System.err.println("Error");
                }
            }
        
    }//GEN-LAST:event_guardarAudioActionPerformed

    private void roundRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundRectActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.lienzo2D1.setForm(4);
        formAnt=4;
        estado.setText("Rectangulo Redondeado");
    }//GEN-LAST:event_roundRectActionPerformed

    private void QuadCurveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuadCurveActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.lienzo2D1.setForm(5);
        formAnt=5;
        estado.setText("Curva con punto de control");
    }//GEN-LAST:event_QuadCurveActionPerformed

    private void colorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame(); 
        JFrame frame = new JFrame("Color Chooser");

 
        // Display the window.
        frame.setSize(200, 200);

        //frame.setVisible(true);
        
        color1 = JColorChooser.showDialog(frame, "Choose a color", Color.blue);
        //if(rel) vi.lienzo2D1.setColorRelleno(color1);
        vi.lienzo2D1.setColor(color1);
        
        


    }//GEN-LAST:event_colorChooserActionPerformed

    private void colorRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRellenoActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame(); 
        JFrame frame = new JFrame("Color Chooser");

 
        // Display the window.
        frame.setSize(200, 200);

        //frame.setVisible(true);
        
        color2 = JColorChooser.showDialog(frame, "Choose a color", Color.blue);
        //if(rel) vi.lienzo2D1.setColorRelleno(color1);
        vi.lienzo2D1.setColorRelleno(color2);
    }//GEN-LAST:event_colorRellenoActionPerformed

    private void strokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strokeActionPerformed
         VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        
         vi.lienzo2D1.setStroke(this.stroke.getSelectedIndex());
        
    }//GEN-LAST:event_strokeActionPerformed

    private void relleno1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relleno1ActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(!rel) {
            vi.lienzo2D1.setRelleno(true);
            rel=true;
        }
        else{
            vi.lienzo2D1.setRelleno(false);
            rel=false;
        }
    }//GEN-LAST:event_relleno1ActionPerformed

    private void fillTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillTypeActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.lienzo2D1.setFillType(this.fillType.getSelectedIndex());
        
    }//GEN-LAST:event_fillTypeActionPerformed

    private void transparencyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparencyStateChanged
         VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
         vi.lienzo2D1.setTransparencia(transparency.getValue());
         transp=transparency.getValue()*0.01;
    }//GEN-LAST:event_transparencyStateChanged

    private void transparencyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transparencyFocusGained
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) imgSource = vi.lienzo2D1.getImage();
    }//GEN-LAST:event_transparencyFocusGained

    private void transparencyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transparencyFocusLost
        imgSource = null;
    }//GEN-LAST:event_transparencyFocusLost

    private void abrirMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMediaActionPerformed
         JFileChooser dlg = new JFileChooser();
         FileNameExtensionFilter File_wav = new FileNameExtensionFilter("VIDEO [wav]", "wav");
        FileNameExtensionFilter File_mp3 = new FileNameExtensionFilter("AUDIO [mp3]", "mp3");
        FileNameExtensionFilter File_mpeg4 = new FileNameExtensionFilter("VIDEO [mpeg4]", "mpeg4");
        FileNameExtensionFilter File_avi = new FileNameExtensionFilter("VIDEO [avi]", "avi");
            
        dlg.setFileFilter(File_wav);
        dlg.setFileFilter(File_mp3);
        dlg.setFileFilter(File_mpeg4); 
        dlg.setFileFilter(File_avi);
             
         int resp = dlg.showOpenDialog(this);

        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();

                VentanaInternaJMFPlayer v= VentanaInternaJMFPlayer.getInstance(f);
                this.escritorio.add(v);
                v.setTitle(f.getName());
                v.setVisible(true);

            } catch (Exception ex) {
                System.err.println("Error");
            }
        }
    }//GEN-LAST:event_abrirMediaActionPerformed

    private void camaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camaraActionPerformed
        VentanaInternaCamara v= VentanaInternaCamara.getInstance();
        this.escritorio.add(v);
        v.setTitle("En grabación");
        v.setVisible(true);
    }//GEN-LAST:event_camaraActionPerformed

    private void captureImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureImgActionPerformed
        VentanaInternaCapture v= new VentanaInternaCapture(this);
       // v.getFrame(null);
        this.escritorio.add(v);
        v.setTitle("Imagenes Capturadas");
        v.setVisible(true);
    }//GEN-LAST:event_captureImgActionPerformed

    private void mifuncionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mifuncionActionPerformed
          VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    
                    //cambiar la funcion

                        LookupTable lt = myoperacion();
                        LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                        lop.filter(imgSource, imgSource);
                        
                        vi.repaint();
////                       
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
                }
            }
    }//GEN-LAST:event_mifuncionActionPerformed

    private void umbralizacionColorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbralizacionColorStateChanged
          VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
                     imgSource = vi.lienzo2D1.getImage();
            try{
                if (imgSource != null) {

                    try {
                        UmbralizacionOpColor umbrOp=new UmbralizacionOpColor(this.umbralizacionColor.getValue());
                        BufferedImage imgdest = umbrOp.filter(imgSource,null);
                       vi.lienzo2D1.setImage(imgdest);
                        vi.lienzo2D1.repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
            catch(NullPointerException e){
                System.err.println(e.getLocalizedMessage());

            }
        }
    }//GEN-LAST:event_umbralizacionColorStateChanged

    private void grayScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayScaleActionPerformed
         VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    BufferedImage dest=convertImageType(imgSource,BufferedImage.TYPE_BYTE_GRAY);
                    //cambiar la funcion

                    vi.lienzo2D1.setImage(dest);

                    vi.lienzo2D1.repaint();
                        
                        vi.repaint();
////                       
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
                }
            }
     
    
    
    }//GEN-LAST:event_grayScaleActionPerformed

    private void acercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercaDeActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        JFrame frame = new JFrame("Acerca De");
        // Display the window.
        frame.setSize(200, 200);

        JOptionPane.showMessageDialog(frame, "Software CsPaint Version 1, 2015, Autor, Carla Simoes");


    }//GEN-LAST:event_acercaDeActionPerformed

    private void umbralizacionColorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralizacionColorFocusGained
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) imgSource = vi.lienzo2D1.getImage();
    }//GEN-LAST:event_umbralizacionColorFocusGained

    private void umbralizacionColorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralizacionColorFocusLost
        imgSource = null;
    }//GEN-LAST:event_umbralizacionColorFocusLost

    private void equalizadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizadorActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    //valor a introducir en la ecualizacion
                    int bandOp=250;
                    EqualizationOp op = new EqualizationOp(bandOp);

                    BufferedImage imgdest = op.filter(imgSource, null);

                    vi.lienzo2D1.setImage(imgdest);

                    vi.lienzo2D1.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_equalizadorActionPerformed

    private void sobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobelActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    //valor a introducir en la ecualizacion

                    SobelOp op = new SobelOp();

                    BufferedImage imgdest = op.filter(imgSource, null);

                    vi.lienzo2D1.setImage(imgdest);

                    vi.lienzo2D1.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sobelActionPerformed

    private void tintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tintadoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {

                    Color c;
                    c=vi.lienzo2D1.getColor();
                    TintOp op = new TintOp(c, (float) 0.5);

                    BufferedImage imgdest = op.filter(imgSource, null);

                    vi.lienzo2D1.setImage(imgdest);

                    vi.lienzo2D1.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_tintadoActionPerformed

    private void duplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    VentanaInterna vi2 = new VentanaInterna(this);
                    vi2.lienzo2D1.setImage(imgSource);
                    this.escritorio.add(vi2);
                    vi2.setTitle("Imagen Duplicada");
                    vi2.setVisible(true);
                }

                catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_duplicarActionPerformed

    private void negativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.lienzo2D1.getImage();
            if (imgSource != null) {
                try {
                    //cambiar la funcion
                    short lt[] = new short[256];
                    for (int i = 0; i < 256; i++) {
                        lt[i] = (short) (255 - i); // Negativo
                    }
                    ShortLookupTable slt = new ShortLookupTable(0, lt);
                    LookupOp lop = new LookupOp(slt, null);
                    BufferedImage imgdest = lop.filter(imgSource, imgSource);

                    // Imagen origen y destino iguales
                    //lop.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_negativoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton QuadCurve;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JMenuItem abrirAudio;
    private javax.swing.JButton abrirJtoolBar;
    private javax.swing.JMenuItem abrirMedia;
    private javax.swing.JCheckBoxMenuItem acercaDe;
    private javax.swing.JButton alisar;
    public javax.swing.JCheckBoxMenuItem barraAtributos;
    private javax.swing.JCheckBoxMenuItem barraEstado;
    public javax.swing.JCheckBoxMenuItem barraFormas;
    public javax.swing.JSlider brilho;
    private javax.swing.JButton camara;
    private javax.swing.JButton captureImg;
    private javax.swing.JButton colorChooser;
    private javax.swing.JButton colorRelleno;
    private javax.swing.JButton contraste;
    private javax.swing.JButton duplicar;
    private javax.swing.JButton editar;
    private javax.swing.JButton ellipse;
    private javax.swing.JButton equalizador;
    public javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton escurecer;
    private javax.swing.JLabel estado;
    private javax.swing.JComboBox fillType;
    private javax.swing.JComboBox filtro;
    private javax.swing.JButton grayScale;
    private javax.swing.JSpinner grosor;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JMenuItem guardarAudio;
    private javax.swing.JButton guardarJToolBar;
    private javax.swing.JLabel iconGrosor;
    private javax.swing.JButton iluminar;
    private javax.swing.JButton incrementa;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    public javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar6;
    private javax.swing.JButton line;
    private javax.swing.JButton mifuncion;
    private javax.swing.JButton negativo;
    private javax.swing.JMenuItem nuevo;
    public javax.swing.JButton nuevojToolBar;
    private javax.swing.JLabel opacidad;
    private javax.swing.JPanel panelColores;
    private javax.swing.JPanel panelPropiedades;
    private javax.swing.JButton pencil;
    private javax.swing.JButton rectangle;
    private javax.swing.JButton reduce;
    private javax.swing.JCheckBox relleno1;
    private javax.swing.JButton resta;
    private javax.swing.JSlider rotacion;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton rotacion270;
    private javax.swing.JButton rotacion90;
    private javax.swing.JButton roundRect;
    private javax.swing.JButton sinusoidal;
    private javax.swing.JButton sobel;
    private javax.swing.JComboBox stroke;
    private javax.swing.JButton suma;
    private javax.swing.JButton tintado;
    private javax.swing.JSlider transparency;
    private javax.swing.JSlider umbralizacion;
    private javax.swing.JSlider umbralizacionColor;
    // End of variables declaration//GEN-END:variables
    /**
     * 
     * @param img
     * @param type 
     * @return BufferedImage
     */
    private BufferedImage convertImageType(BufferedImage img, int type) {
        if (img == null) {
            return null;
        }
        BufferedImage imgOut = new BufferedImage(img.getWidth(),
                img.getHeight(), type);
        Graphics2D g2d = imgOut.createGraphics();
        g2d.drawImage(img, 0, 0, null);
        return imgOut;
    }
     /**
   * createThresholdOp() uses a LookupOp to simulate a
   * thresholding operation.
  **/
    private LookupTable createThresholdOp(int threshold,
            int minimum, int maximum) {
        short[] thresholdArray = new short[256];
        for (int i = 0; i < 256; i++) {
            if (i < threshold) {
                thresholdArray[i] = (short) minimum;
            } else {
                thresholdArray[i] = (short) maximum;
            }
        }
        return new ShortLookupTable(0, thresholdArray);
    }
    
    /**
     *
     * @param m
     * @param e
     * @return LookupTable
     */
    public static LookupTable sFuction(double m, double e) {
        double Max = (1.0 / (1.0 + Math.pow(m / 255.0, e)));
        double K = 255.0 / Max;
        byte lt[] = new byte[256];
        lt[0] = 0;
        for (int l = 1; l < 256; l++) {
            lt[l] = (byte) (K * (1.0 / (1.0 + Math.pow(m / (float) l, e))));
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
}
    
    /**
     *Seno Function
     * @param w
     * @return LookupTable
     */
    public  LookupTable seno(double w) {
        double K = 255/(Math.abs(Math.sin(Math.PI/2))); // Cte de normalización
        // Código implementado f(x)=|sin(wx)|
        byte lt[] = new byte[256];
        lt[0] = 0;
        
        for (int l = 1; l < 256; l++) {
            
            lt[l] = (byte) (K *  Math.abs(Math.sin(w*Math.toRadians(l))));
        }
        
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }
  /**
 * Returns the selected file from a JFileChooser, including the extension from
 * the file filter.
     * @param c
     * @return 
 */
public static File getSelectedFileWithExtension(JFileChooser c) {
    File file = c.getSelectedFile();
    if (c.getFileFilter() instanceof FileNameExtensionFilter) {
        String[] exts = ((FileNameExtensionFilter)c.getFileFilter()).getExtensions();
        String nameLower = file.getName().toLowerCase();
        for (String ext : exts) { // check if it already has a valid extension
            if (nameLower.endsWith('.' + ext.toLowerCase())) {
                return file; // if yes, return as-is
            }
        }
        // if not, append the first extension from the selected filter
        file = new File(file.toString() + '.' + exts[0]);
    }
    return file;
}
 
    /**
     *Operation to image 
     * inverting
     * and straigthen
     * @return LookupTable
     */
    public LookupTable myoperacion() {
 
    // Lookup table operations: inversion and straight.
 
    short[] invert = new short[256];
    short[] straight = new short[256];
    for (int i = 0; i < 256; i++) {
      invert[i] = (short)(255 - i);
      straight[i] = (short)i;
    }
    short[][] blueInversion = new short[][] { straight, straight, invert };
    return new ShortLookupTable(0, blueInversion);
    
}
}




